---
import "@/styles/globals.css";
import { ModeToggle } from "@/components/ModeToggle";
import { Separator } from "@/components/ui/separator";

import GithubLink from "@/components/GitHubLink.astro";

import cv from "../assets/data/cv.json";
import TimelineSection from "@/components/TimelineSection.astro";
import Hero from "@/components/Hero.astro";
import ProjectsSection from "@/components/ProjectsSection.astro";
import Honors from "@/components/Honors.astro";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Vittorio Pio Remigio Cozzoli</title>
  </head>
  <body class="dark:diamond-gradient">
    <div class="fixed m-3 right-0 bottom-0"><ModeToggle client:load /></div>
    <div class="container">
      <Hero
        title={cv.hero.title}
        badge={cv.hero.badge}
        description={cv.hero.description}
        badge={cv.hero.badge}
        cvPath={cv.hero.cvPath}
      />
      {
        cv.sections.map((data) => {
          switch (data.type) {
            case "timeline":
              return <TimelineSection data={data} />;
          }
        })
      }
      <ProjectsSection data={cv.projects} />
      <Honors data={cv.honors} />
      <footer class="text-center text-gray-500 text-sm mt-8 mb-4">
        <Separator className="my-3" />
        <p>
          A heartfelt thank you to <a href="https://github.com/PiervitoCreanza">Piervito Creanza</a> for lovingly creating this model. ðŸ«¶
          <br>
          Technology stack: <a href="https://astro.build">Astro</a>, <a
            href="https://tailwindcss.com">Tailwind CSS</a
          > and <a href="https://ui.shadcn.com/">Shadcn</a>
        </p>
        <div class="flex justify-center mt-2">
          <GithubLink
            profileName="PiervitoCreanza"
            projectName="piervito.com"
          />
        </div>
      </footer>
    </div>
  </body>

  <script is:inline>
    const getThemePreference = () => {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      console.log("No theme preference found in localStorage");
      // Fallback to dark theme
      return "dark";
      /*
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";*/
    };
    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  </script>
</html>
